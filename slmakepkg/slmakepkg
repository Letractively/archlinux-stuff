#!/bin/bash

#
# Usage:
#   $0 /path/to/pkg PKGBUILD
#

myver='3.0.3'
startdir=$1
startcwd=`pwd`

BUILDSCRIPT=$2
PKGEXT="pkg.tar.gz"

#source "/etc/abs/abs.conf"
#SRCROOT="$ABSROOT"

# Options
CLEANUP=0
CLEANCACHE=0
DEP_BIN=0
DEP_SRC=0
SUDO=0
FORCE=0
GENINTEG=0
INSTALL=0
NOBUILD=0
NODEPS=0
NOEXTRACT=0
RMDEPS=0
REPKG=0
LOGGING=0

PACMAN_OPTS=

#determine if we are running with fakeroot
if [ "$1" = "-F" ]; then
	INFAKEROOT=1
	shift
else
	INFAKEROOT=0
fi

### SUBROUTINES ###

# checks to see if options are present in makepkg.conf or PKGBUILD;
#   PKGBUILD options always take precedence
check_option() {
	local needle=$(echo $1 | tr [:upper:] [:lower:])
	local i
	# loop PKGBUILD opts first so it overrides makepkg.conf
	for i in ${options[@]}; do
		local lc=$(echo $i | tr [:upper:] [:lower:])
		if [ "$lc" = "$needle" ]; then
			echo "y"
			return
		elif [ "$lc" = "!$needle" ]; then
			echo "n"
			return
		# START DEPRECATED
		# TODO This code should be removed in the next release of makepkg
		elif [ "$lc" = "no$needle" ]; then
			warning "Options beginning with 'no' will be depricated in the next version of makepkg!"
			plain "Please replace 'no' with '!': no$needle -> !$needle."
			echo "n"
			return
		elif [ "$lc" = "keepdocs" -a "$needle" = "docs" ]; then
			warning "Option 'keepdocs' may not work as intended. Please replace with 'docs'."
		# END DEPRECATED
		fi
	done
	# fall back to makepkg.conf options
	for i in ${OPTIONS[@]}; do
		local lc=$(echo $i | tr [:upper:] [:lower:])
		if [ "$lc" = "$needle" ]; then
			echo "y"
			return
		elif [ "$lc" = "!$needle" ]; then
			echo "n"
			return
		fi
	done
	echo "unknown"
	return
}

check_buildenv() {
	local needle=$(echo $1 | tr [:upper:] [:lower:])
	local i
	# use options from makepkg.conf
	for i in ${BUILDENV[@]}; do
		local lc=$(echo $i | tr [:upper:] [:lower:])
		if [ "$lc" = "$needle" ]; then
			echo "y"
			return
		elif [ "$lc" = "!$needle" ]; then
			echo "n"
			return
		fi
	done
	echo "unknown"
	return
}

plain() {
	if [ ! "$USE_COLOR" = "n" -a "$(check_buildenv color)" = "y" ]; then
		echo -e "    \033[1;1m$1\033[1;0m" >&2
	else
		echo "    $1" >&2
	fi
}

msg() {
	if [ ! "$USE_COLOR" = "n" -a "$(check_buildenv color)" = "y" ]; then
		echo -e "\033[1;32m==>\033[1;0m \033[1;1m$1\033[1;0m" >&2
	else
		echo "==> $1" >&2
	fi
}

msg2() {
	if [ ! "$USE_COLOR" = "n" -a "$(check_buildenv color)" = "y" ]; then
		echo -e "   \033[1;34m->\033[1;0m \033[1;1m$1\033[1;0m" >&2
	else
		echo "   -> $1" >&2
	fi
}

warning() {
	if [ ! "$USE_COLOR" = "n" -a "$(check_buildenv color)" = "y" ]; then
		echo -e "\033[1;33m==> WARNING:\033[1;0m \033[1;1m$1\033[1;0m" >&2
	else
		echo "==> WARNING: $1" >&2
	fi
}

error() {
	if [ ! "$USE_COLOR" = "n" -a "$(check_buildenv color)" = "y" ]; then
		echo -e "\033[1;31m==> ERROR:\033[1;0m \033[1;1m$1\033[1;0m" >&2
	else
		echo "==> ERROR: $1" >&2
	fi
}

in_array() {
	local needle=$1
	shift 1
	[ -z "$1" ] && return 1
	for i in $*; do
		[ "$i" = "$needle" ] && return 0
	done
	return 1
}

ARGLIST=$@

#Source makepkg.conf; fail if it is not found
if [ -f /etc/makepkg.conf ]; then
	source /etc/makepkg.conf
else
	error "/etc/makepkg.conf not found. cannot continue"
	exit 1
fi

if [ -f ~/.makepkg.conf ]; then
	source ~/.makepkg.conf
fi

unset pkgname pkgver pkgrel pkgdesc url license groups provides md5sums force
unset replaces depends conflicts backup source install build makedepends
unset options noextract

if [ ! -f $BUILDSCRIPT ]; then
	error "$BUILDSCRIPT does not exist."
	exit 1
fi

source $BUILDSCRIPT

# check for no-no's in the build script
if [ -z "$pkgver" ]; then
	error "pkgver is not allowed to be empty."
	exit 1
fi
if [ -z "$pkgrel" ]; then
	error "pkgrel is not allowed to be empty."
	exit 1
fi
if [ $(echo "$pkgver" | grep '-') ]; then
	error "pkgver is not allowed to contain hyphens."
	exit 1
fi
if [ $(echo "$pkgrel" | grep '-') ]; then
	error "pkgrel is not allowed to contain hyphens."
	exit 1
fi
if ! in_array $CARCH ${arch[@]}; then
	error "$pkgname is not available for the '$CARCH' architecture."
	plain "Note that many packages may need a line added to their $BUILDSCRIPT"
	plain "such as arch=('$CARCH')."
	exit 1
fi

if [ "$install" -a ! -f "$startcwd/$install" ]; then
	error "install scriptlet ($startcwd/$install) does not exist."
	exit 1
fi

# move /usr/share/man files to /usr/man
if [ -d $startdir/usr/share/man ]; then
	cd "$startdir"
	mkdir -p usr/man 
	cp -a usr/share/man/* usr/man/
	rm -rf usr/share/man
fi

# compress man pages
msg "Compressing man pages..."
find "$startdir"/{usr{,/local},opt/*}/man -type f 2>/dev/null | while read i ; do
	ext="${i##*.}"
	fn="${i##*/}"
	if [ "$ext" != "gz" -a "$ext" != "bz2" ]; then
		# update symlinks to this manpage
		find "$startdir"/{usr{,/local},opt/*}/man -lname "$fn" 2> /dev/null | while read ln ; do
			rm -f "$ln"
			ln -sf "${fn}.gz" "${ln}.gz"
		done
		# compress the original
		gzip -9 "$i"
	fi
done

cd "$startdir"

# strip binaries
if [ "$(check_option strip)" = "y" ]; then
	msg "Stripping debugging symbols from libraries..."
	find ./{,usr,usr/local,opt/*}/lib -type f -not -name "*.dll" -not -name "*.exe" \
	-exec /usr/bin/strip --strip-debug '{}' \; 2>&1 \
	| grep -v "No such file" | grep -v "format not recognized"
	msg "Stripping symbols from binaries..."
	find ./{,usr,usr/local,opt/*}/{bin,sbin} -type f -not -name "*.dll" -not -name "*.exe" \
	-exec /usr/bin/strip '{}' \; 2>&1 \
	| grep -v "No such file" | grep -v "format not recognized"
fi

# get some package meta info
builddate=$(LC_ALL= ; LANG= ; date -u "+%a %b %e %H:%M:%S %Y")
if [ "$PACKAGER" != "" ]; then
	packager="$PACKAGER"
else
	packager="Arch Linux (http://www.archlinux.org)"
fi
size=$(du -cb "$startdir" | tail -n 1 | awk '{print $1}')

# build a filelist - do this first to keep meta files out of the list
msg "Generating .FILELIST file..."
cd "$startdir"
tar cvf /dev/null * | sort >.FILELIST

# write the .PKGINFO file
msg "Generating .PKGINFO file..."
cd "$startdir"
echo "# Generated by makepkg $myver" >.PKGINFO
echo -n "# " >>.PKGINFO
date >>.PKGINFO
echo "pkgname = $pkgname" >>.PKGINFO
echo "pkgver = $pkgver-$pkgrel" >>.PKGINFO
echo "pkgdesc = $pkgdesc" >>.PKGINFO
echo "url = $url" >>.PKGINFO
echo "builddate = $builddate" >>.PKGINFO
echo "packager = $packager" >>.PKGINFO
echo "size = $size" >>.PKGINFO
if [ "$CARCH" != "" ]; then
	echo "arch = $CARCH" >>.PKGINFO
fi

for it in "${license[@]}"; do
	echo "license = $it" >>.PKGINFO
done
for it in "${replaces[@]}"; do
	echo "replaces = $it" >>.PKGINFO
done
for it in "${groups[@]}"; do
	echo "group = $it" >>.PKGINFO
done
for it in "${depends[@]}"; do
	echo "depend = $it" >>.PKGINFO
done
for it in "${conflicts[@]}"; do
	echo "conflict = $it" >>.PKGINFO
done
for it in "${provides[@]}"; do
	echo "provides = $it" >>.PKGINFO
done
for it in "${backup[@]}"; do
	echo "backup = $it" >>.PKGINFO
done

# TODO maybe remove this at some point
# warn if license array is not present or empty
if [ "$license" = "" ]; then
	warning "Please add a license line to your $BUILDSCRIPT!"
	plain "example for GPL'ed software: license=('GPL')."
fi

# check for an install script
if [ "$install" != "" ]; then
	msg "Copying install script..."
	cp "$startcwd/$install" "$startdir/.INSTALL"
fi

# tar it up
msg "Compressing package..."
cd "$startdir"

pkg_file="$startcwd/$pkgname-$pkgver-$pkgrel-${CARCH}.${PKGEXT}"
comp_files=".PKGINFO .FILELIST ${install:+.INSTALL}"

have_changelog=0
if [ -f "$startdir/ChangeLog" ]; then
	msg "Copying package changelog"
	cp "$startdir/ChangeLog" "$startdir/.CHANGELOG"
	have_changelog=1
fi

[ $have_changelog -eq 1 ] && comp_files=".CHANGELOG $comp_files"

if ! tar czf $pkg_file $comp_files *; then
	error "Failed to create package file." 
	exit 1
fi

exit 0
