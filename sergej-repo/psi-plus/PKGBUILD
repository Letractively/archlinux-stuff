# $Id$
# Maintainer: Sergej Pupykin <pupykin.s+arch@gmail.com>

pkgname="psi+"
pkgver=3132
pkgrel=2
pkgdesc="Psi IM Mod by psi-dev@conference.jabber.ru"
url="http://code.google.com/p/psi-dev/"
license=('GPL2')
arch=('i686' 'x86_64')
depends=('qt' 'qca' 'qca-ossl' 'qca-gnupg' 'aspell' 'libxss' 'openssl' 'dbus' 'zlib')
makedepends=("subversion" "git")
conflicts=('psi' 'psi-svn' 'psi-git')
provides=('psi-plus' 'psi+' 'psi')
options=(force)

# Use desired number here or put empty string to get HEAD
revision=""

# Make quietly (say "0" here if you want to see all output)
quietmake=1

# Use powersave
powersave=0

# Use crash handling dialog (only for KDE)
# (Not useful yet, so you may safely say 0 here)
usecrash=0

# Use whiteboarding
# CAUTION: you may see build error if you say "1" here :)
whiteboarding=1

# Use WebKit
# CAUTION: webkit is EXPERIMENTAL feature! Use it at your own risk!
usewebkit=1

_svntrunk="http://psi-dev.googlecode.com/svn/trunk"
_svnmod="patches"
_gitroot__="git://git.psi-im.org/psi.git"
_gitname__="psi"
_iconsetssvntrunk="http://psi-dev.googlecode.com/svn/trunk/iconsets"
_iconsetssvnmod="iconsets"
_skinssvntrunk="http://psi-dev.googlecode.com/svn/trunk/skins"
_skinssvnmod="skins"
_certssvntrunk="http://psi-dev.googlecode.com/svn/trunk/certs"
_certssvnmod="certs"
_pluginssvntrunk="http://psi-dev.googlecode.com/svn/trunk/plugins"
_pluginssvnmod="plugins"
_langpacksvntrunk="http://psi-ru.googlecode.com/svn/branches/psi-plus" # newer than trunk?
_langpacksvnmod="psi-plus"

# Options for 'make' utility for parallel compilation
MAKEOPT=${MAKEOPT:--j$((`cat /proc/cpuinfo | grep processor | wc -l`+1))}
source=(whiteboard-build-fix.patch)
md5sums=(76a56a433e36a705657feeddf9a9563e)

build() {
  cd $srcdir
  [ -z $revision ] && revision=$pkgver
  msg2 "SVN revision $revision will be used"
if true; then
  msg "Getting patches from SVN"
  msg "Connecting to $_svntrunk/$_svnmod ..."
  if [ -d $srcdir/$_svnmod ] ; then
    svn up $_svnmod -r $revision
    msg "$srcdir/$_svnmod"
  else
    svn checkout $_svntrunk/$_svnmod $srcdir/$_svnmod -r $revision
  fi
  msg "SVN Checkout done or server timeout"

  msg "Getting iconsets from SVN"
  msg "Connecting to $_iconsetssvntrunk ..."
  if [ -d $srcdir/$_iconsetssvnmod ] ; then
    svn up $_iconsetssvnmod -r $revision
    msg "$srcdir/$_iconsetssvnmod"
  else
    svn checkout $_iconsetssvntrunk $srcdir/$_iconsetssvnmod -r $revision
  fi
  msg "SVN Checkout done or server timeout"

  msg "Getting skins from SVN"
  msg "Connecting to $_skinssvntrunk ..."
  if [ -d $srcdir/$_skinssvnmod ] ; then
    svn up $_skinssvnmod -r $revision
    msg "$srcdir/$_skinssvnmod"
  else
    svn checkout $_skinssvntrunk $srcdir/$_skinssvnmod -r $revision
  fi
  msg "SVN Checkout done or server timeout"

  msg "Getting certs from SVN"
  msg "Connecting to $_certssvntrunk ..."
  if [ -d $srcdir/$_certssvnmod ] ; then
    svn up $_certssvnmod -r $revision
    msg "$srcdir/$_certssvnmod"
  else
    svn checkout $_certssvntrunk $srcdir/$_certssvnmod -r $revision
  fi
  msg "SVN Checkout done or server timeout"

  msg "Getting plugins from SVN"
  msg "Connecting to $_pluginssvntrunk ..."
  if [ -d $srcdir/$_pluginssvnmod ] ; then
    svn up $_pluginssvnmod -r $revision
    msg "$srcdir/$_pluginssvnmod"
  else
    svn checkout $_pluginssvntrunk $srcdir/$_pluginssvnmod -r $revision
  fi
  msg "SVN Checkout done or server timeout"

  msg "Getting langpack from SVN"
  msg "Connecting to $_langpacksvntrunk ..."
  if [ -d $srcdir/$_langpacksvnmod ] ; then
    svn up $_langpacksvnmod
    msg "$srcdir/$_langpacksvnmod"
  else
    svn checkout $_langpacksvntrunk $srcdir/$_langpacksvnmod
  fi
  msg "SVN Checkout done or server timeout"

  msg "Connecting to $_gitroot__ ..."
  if [ -d $srcdir/$_gitname__ ] ; then
    cd $_gitname__ && git pull origin
    msg "Updating iris ..."
    git submodule update
    msg "The local files are updated."
  else
    git clone $_gitroot__
    cd psi
    msg "Getting iris ..."
    git submodule init
    git submodule update
  fi
  msg "GIT checkout done or server timeout"
fi

  [ -d $srcdir/$_gitname__-build ] && rm -r $srcdir/$_gitname__-build
  cp -r $srcdir/$_gitname__ $srcdir/$_gitname__-build

  msg "Copying patches to build directory"
  mkdir $srcdir/$_gitname__-build/patches
  cp -r $srcdir/patches/* $srcdir/$_gitname__-build/patches/

  msg "Applying patches"
  cd $srcdir/$_gitname__-build/patches
  rm -f *-psi-win32-*         #useless windows patches
  rm -f *dirty-check*         #useless update check
  if [ $powersave -eq "1" ] ; then
    cp dev/psi-reduce-power-consumption.patch psi-reduce-power-consumption.diff
  fi

  cd $srcdir/$_gitname__-build
  log=$srcdir/$_gitname__-build/PATCHING.log
  for i in $srcdir/$_gitname__-build/patches/*.diff; do
    pn=$(basename $i)
    msg2 "Applying '$pn'"
    patch -p1 < "$i" >> $log  2>&1 || { echo "$i FAILED"; true; }
    if [ "$?" -ne 0 ]; then
      error "Patching failed. Please, see log at '$log'."
      return 1
    fi
  done

  # Get program version
  ver=$(cat src/applicationinfo.cpp | awk 'BEGIN {} { ver = match($0, /PROG_VERSION "..../); if (ver) { print substr($0,RSTART+14,4); exit; }}')
#  [ $usewebkit -eq "1" ] && revision=$revision"webkit" || true
  pkgver="$ver.$revision"
  sed "s/\(.xxx\)/.$revision/" -i src/applicationinfo.cpp
  msg "Adding extra plugins"
  cp -rf $srcdir/$_pluginssvnmod $srcdir/$_gitname__-build/src

  msg "Building $pkgname ..."
  # We use system libraries
  rm -rf third-party/qca

  # Enable plugins if disabled
  sed 's/#CONFIG += psi_plugins/CONFIG += psi_plugins/' -i src/src.pro
  if [ $usecrash -eq "1" ] ; then
    sed 's/#CONFIG += use_crash/CONFIG += use_crash/' -i src/src.pro
    msg2 "Using crash handler: yes"
  else
    msg2 "Using crash handler: no"
  fi

  if [ $powersave -eq "1" ] ; then
    msg2 "Using powersave: yes"
  else
    msg2 "Using powersave: no"
  fi

  # Enable whiteboarding
  if [ $whiteboarding -eq "1" ] ; then
    sed 's/#CONFIG += whiteboarding/CONFIG += whiteboarding/' -i src/src.pro
    # Fix undefined qdebug
    (cd src/sxe && patch -p1 <$srcdir/whiteboard-build-fix.patch)
    msg2 "Using whiteboarding: yes"
    warning "Whiteboarding is very unstable thing. Don't post bug reports about it!"
  else
    msg2 "Using whiteboarding: no"
  fi

  # Webkit setup
  if [ $usewebkit -eq "1" ] ; then
    msg2 "Using webkit: yes"
    warning "webkit is VERY COOL feature! Use it at your own risk!"
  else
    msg2 "Using webkit: no"
  fi

  msg2 "Fixing iconsets..."
  mkdir -p $srcdir/$_gitname__-build/iconsets/system/default
  cp -r $srcdir/iconsets/* $srcdir/$_gitname__-build/iconsets/

  msg2 "Running configure ..."
  ./configure --prefix=/usr --release --disable-bundled-qca --disable-growl

  # Enable webkit support
  [ $usewebkit -eq "1" ] && echo "CONFIG += webkit" >> conf.pri

  msg2 "Building ..."
  if [ $quietmake -eq "1" ] ; then
    make $MAKEOPT > /dev/null
  else
    make $MAKEOPT
  fi
  msg2 "Installing ..."
  make INSTALL_ROOT="$pkgdir" install

  # Copy Psi license
  install -D COPYING "$pkgdir/usr/share/licenses/$pkgname/COPYING"

  cd $pkgdir/usr/share/psi
  msg2 "Copying iconsets, skins and certs ..."
  cp -rf $srcdir/iconsets ./
  cp -rf $srcdir/skins ./
  cp -rf $srcdir/certs ./

  # Copy langpack
  msg "Copying langpack ..."
  install -D -m 644 $srcdir/$_langpacksvnmod/*.qm ./
  install -D -m 644 $srcdir/$_langpacksvnmod/qt/*.qm ./

  msg "Building extra plugins ..."
  cd $srcdir/$_gitname__-build/src/plugins/generic
  # Create project file for extra plugins and compile them
  echo "TEMPLATE = subdirs" > extraplugins.pro
  echo -n "SUBDIRS = " >> extraplugins.pro
  ls -1 ../../../../plugins/* | grep -v testoptplugin | sed -e :a -e '$b;N;s/\n/ /;ba' >> extraplugins.pro
  qmake extraplugins.pro
  # Fix bad project name
  sed 's/screenshot\.pro/screenshotplugin\.pro/' -i Makefile
  if [ $quietmake -eq "1" ] ; then
    make $MAKEOPT > /dev/null
  else
    make $MAKEOPT
  fi
  # Copy plugins
  mkdir $pkgdir/usr/share/psi/plugins
  find . -name "lib*plugin.so" -exec cp -f {} $pkgdir/usr/share/psi/plugins \;
  # Remove useless entries
  find $pkgdir -name ".svn" -type d | xargs rm -rf
  rm -f $pkgdir/usr/bin/*.debug
  rm -rf $srcdir/$_gitname__-build
}
