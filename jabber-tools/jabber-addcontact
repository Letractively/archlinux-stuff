#!/usr/bin/perl
use strict;
use AnyEvent;
use Net::XMPP2::IM::Connection;
use Net::XMPP2::IM::Roster;

my $DEBUG   = 0;  # set to 1 if you want to see a protocol dump
my $TIMEOUT = 600; # timeout the whole program after $TIMEOUT seconds

binmode STDOUT, ":utf8";

my ($jid, $pass, $host, $port) = @ARGV;

my $j = AnyEvent->condvar;

my $con;
if(defined $host)
{
    $con =
	Net::XMPP2::IM::Connection->new (
    	    jid              => $jid,
    	    password         => $pass,
    	    initial_presence => -5,
    	    override_host => $host,
    	    override_port => $port)
}
else
{
    $con =
	Net::XMPP2::IM::Connection->new (
    	    jid              => $jid,
    	    password         => $pass,
    	    initial_presence => -5);
}

$con->reg_cb (
   debug_recv => sub { print "< $_[1]\n" },
   debug_send => sub { print "> $_[1]\n" },
) if $DEBUG;

my $timer =
   AnyEvent->timer (
      after => 600, cb => sub { warn "got timeout, exiting..."; $j->broadcast }
   );

$con->reg_cb (
   session_ready => sub {
      my ($con) = @_;
   },
   error => sub {
      my ($con, $error) = @_;
      warn "error: " . $error->string . "\n";
   },
   disconnect => sub {
      my ($con, $host, $port, $message) = @_;
      warn "disconnected from $host:$port: $message\n";
      $j->broadcast;
   },
   roster_update => sub {
	my $ro = $con->{roster};
	$ro->new_contact("test\@test.com", "name", "GRP", sub { $j->broadcast; });
   }
);


$con->connect;
$j->wait;
